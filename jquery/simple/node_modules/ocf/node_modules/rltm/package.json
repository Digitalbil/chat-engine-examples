{
  "name": "rltm",
  "version": "1.3.1",
  "description": "abstraction for realtime frameworks",
  "main": "src/index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pubnub/rltm.js.git"
  },
  "keywords": [
    "realtime",
    "abstraction",
    "socket.io",
    "pubnub",
    "faye"
  ],
  "author": {
    "name": "PubNub"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/pubnub/rltm/issues"
  },
  "homepage": "https://github.com/pubnub/rltm#readme",
  "devDependencies": {
    "async": "^2.1.4",
    "browserify": "^13.1.0",
    "chai": "^3.5.0",
    "gulp": "^3.9.1",
    "vinyl-source-stream": "^1.1.0"
  },
  "dependencies": {
    "browserify": "^13.1.0",
    "pubnub": "^4.0.13",
    "socket.io": "^1.5.1",
    "socket.io-client": "^1.5.1"
  },
  "readme": "![](./assets/rltm.js-logo.png)\n\nUniversal API for realtime services. Integrate once and easily switch between Socket.io and PubNub. \n\nProvides handy methods for rooms, users, message history, and information about connected user.\n\nSupported realtime services:\n\n![](./assets/socketio.png)\n\n![](./assets/pubnub.png)\n\n# Setup\n\n## NPM\n\nInstall via NPM.\n\n```sh\nnpm install rltm --save\n```\n\nInclude library via require.\n\n```js\nconst rltm = require('rltm');\n```\n\n## Web\n\nInstall via bower or NPM\n\n```sh\nnpm install rltm --save\nbower install rltm --save\n```\n\nInclude library in HTML.\n\n```html\n<script src=\"./bower_components/web/rltm.js\"></script>\n```\n\n# Configure\n\nBoth the NodeJS and web libraries are configured with the ```rltm``` variable. \n\n```js\nlet user = rltm({\n    service: 'pubnub',\n    config: {\n        // ...\n    }\n});\n```\n\n* ```service``` is the name of the realtime service to use (```pubnub``` or ```socketio```) \n* ```config``` is a Javascript object with a config for that service.\n\n## PubNub or Socket.io\n\n#### [Set Up With Socket.io](/guides/socketio.md)\n\nSocket.io is an open source websocket framework. To use socket.io, you'll run\nyour own socket.io server on the back end. \n\n#### [Set Up With PubNub](/guides/pubnub.md)\n\nPubNub is a hosted realtime solution that doesn't require you to run or maintain any servers.\n\n# Usage\n\n## Users\n\nEvery ```user``` connected to rltm.js has two properties:\n\n1. ```uuid``` - a unique way to identify this ```user```\n1. ```state``` - data associated with this ```user```\n\nYou can provide these as parameters during initialization.\n\n```js\nlet user = rltm({\n    service: 'socketio', \n    config: {\n        endpoint: 'http://localhost:9000',\n        uuid: 'MY_UNIQUE_ID',\n        state: {admin: true}\n    }\n});\n```\n\n## Rooms\n\nRealtime communication happens over ```room```s. ```room```s are like chat rooms, everybody in a ```room``` receives events sent by every other ```user```.\n\nA ```user``` can join a ```room``` by using the ```join()``` method and supplying a ```room``` identifier. ```user```s who provide the same  identifier will be able to communicate with each other.\n\n```js\nroom = user.join('room-name');\n```\n\nThis returns a ```room``` object which we can use to communicate with other ```user```s.\n\n### Join Event\n\nA room can subscribe to the ```join``` event to find out when other ```user```s join the room.\n\n```js\nroom.on('join', (uuid, state) => {\n    console.log('user with uuid', uuid, 'joined with state', state);\n});\n```\n\n## Messages\n\n### Message Event\n\nWhen another ```user``` sends a message to the ```room```, it will trigger the ```message``` event. The ```room``` can subscribe to that event with the ```on()``` method.\n\n```js\nroom.on('message', (uuid, data) => {\n    console.log('message received from uuid', uuid, 'with data', data);\n});\n```\n\n### Publish\n\nTo send a message to the entire ```room```, use the ```message()``` method. Returns a promise.\n\n```js\nroom.message({hello: world}).then(() => {\n    console.log('message published');\n});\n```\n\n## Online Users\n\n### Here Now\n\nA ```room``` can get a list of other ```user```s who have in the ```room``` by using the ```here()``` method. Returns a promise.\n\n```js\nroom.here().then((users) => {\n    console.log('users online', users);\n});\n```\n\nSuccessful responses will return a object of ```user```s who are currently connected to the ```room```. The keys are the ```user```'s ```uuid```s and the values are their current ```state```.\n\n```js\n{ \n    uuid1: {\n        username: 'ianjennings'\n    },\n    uuid2: {\n        username: 'stephenblum'\n    }\n}\n```\n\n### Leave Event\n\nA ```room``` can subscribe to the ```leave``` event to find out when a ```user``` leaves.\n\n```js\nroom.on('leave', (uuid) => {\n    console.log('user with uuid', uuid, 'has left');\n});\n```\n\nA ```user``` can manually leave a ```room``` by using the ```leave()``` method. Returns a promise.\n\n```js\nroom.leave().then(() => {\n    console.log('left the room.');\n});\n```\n\nThis will fire the ```leave``` event.\n\n### Disconnect\n\nIf a ```user``` gets disconnected without leaving the room, the ```disconnect``` event will fire.\n\n```js\nroom.on('disconnect', (uuid) => {\n    console.log('user with uuid', uuid, 'has disconnected');\n});\n```\n\n## Set User State\n\nA ```user``` state can be updated at any time by using the ```state()``` method. Supply the new ```state``` as the only parameter. Return a promise.\n\n```js\nroom.state({idle: true}).then(() => {\n    console.log('state set');\n});\n```\n\nThis will fire the ```state``` event which you can subscribe to with the ```room.on()``` method. When fired you will get the ```uuid``` of the ```user``` and the new ```state```.\n\n```js\nroom.on('state', (uuid, state) => {\n    console.log('user with uuid', uuid, 'was given state', state);\n});\n```\n\n## Get Old Messages\n\nA ```user``` can retrieve previously published messages in the ```room``` by using the ```history()``` method. Returns a promise.\n\n```js\nroom.history().then((history) => {\n    console.log('got array of all messages in channel', history);\n});\n```\n\nIt will return the last 100 messages as an array of objects containing the ```uuid``` and ```data``` of every message. The array is sorted newest to oldest.\n\n```js\n[ \n    { \n        uuid: uuid2, \n        data: { \n            sentTime: '2pm',\n            text: 'boy howdy' \n        } \n    }, \n    { \n        uuid: uuid1, \n        data: { \n            sentTime: '1pm',\n            text: 'hello there' \n        } \n    }\n]\n```\n\n## Test\n\nTests are run with mocha and chai.\n\n```sh\nnpm install mocha -g\nnpm install chai -g\n```\n\nSet environment variable ```CLIENT``` to test either service.\n\n```sh\nenv CLIENT=pubnub mocha\n```\n\n```sh\nenv CLIENT=socketio mocha\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "a973dfb2b7b311d107b3999ad58d2244a04bb4bc",
  "_id": "rltm@1.3.1",
  "_shasum": "2c57b3ecab3e1161565855784f1f105a01861927",
  "_from": "rltm@>=1.1.0 <2.0.0"
}
