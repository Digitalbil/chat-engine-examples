{
  "name": "ocf",
  "version": "0.0.5",
  "description": "Open Chat Framework",
  "main": "src/index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pubnub/open-chat-framework.git"
  },
  "keywords": [
    "pubnub",
    "chat",
    "sdk",
    "realtime"
  ],
  "author": {
    "name": "Ian Jennings"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/pubnub/open-chat-framework/issues"
  },
  "homepage": "https://github.com/pubnub/open-chat-framework#readme",
  "devDependencies": {
    "browserify": "^13.1.0",
    "chai": "^3.5.0",
    "gulp": "^3.9.1",
    "gulp-uglify": "^2.0.0",
    "mocha": "^3.1.2",
    "vinyl-source-stream": "^1.1.0"
  },
  "dependencies": {
    "async": "^2.1.2",
    "eventemitter2": "^2.2.1",
    "rltm": "^1.1.0",
    "yuidoc-bootstrap-theme": "^1.0.6"
  },
  "readme": "# OCF - Open Chat Framework\n\nOCF is an object oriented event emitter based framework for building chat applications in Javascript. OCF makes it easy to \nbuild Slack, Flowdock, Discord, Skype, Snapchat, or WhatsApp with ease. \n\nThe real time server component is provided by Socket.io or PubNub. OCF is extensible and includes a plugin framework to make dropping in features simple.\n\n# Notes\n\nOpen Chat Framework is currently under development. The API is subject to change.\n\n# Examples\n\n## Javascript Examples\n\n* [Chat](https://pubnub.github.io/open-chat-framework/examples/javascript/chat.html)\n* [Online List](https://pubnub.github.io/open-chat-framework/examples/javascript/online-list.html)\n* [Friends List](https://pubnub.github.io/open-chat-framework/examples/javascript/friends-list.html)\n* [Gravatar](https://pubnub.github.io/open-chat-framework/examples/javascript/gravatar.html)\n\n## SDK Integrations\n\n* [jQuery](https://pubnub.github.io/open-chat-framework/examples/jquery/index.html)\n* [Angular](https://pubnub.github.io/open-chat-framework/examples/angular/index.html)\n* [React](./examples/react/public/index.html)\n\n## Authentication\n\n* [Facebook Login](https://pubnub.github.io/open-chat-framework/examples/3rd-party-login/facebook.html)\n\n## Chatbot\n\n* [NodeJS ChatBot](https://pubnub.github.io/open-chat-framework/examples/bot.js)\n\n## Plugins\n\nCheck out the [jQuery](https://pubnub.github.io/open-chat-framework/examples/jquery/index.html) and [Angular](https://pubnub.github.io/open-chat-framework/examples/angular/index.html) examples to see plugins in action.\n\n* [Middleware](./plugins/append.js)\n* [Message History](./plugins/messageHistory.js)\n* [Search Online Users](./plugins/onlineUserSearch.js)\n* [Set a Random Username](./plugins/randomUsername.js)\n* [Ian Is Typing... Indicator](./plugins/typingIndicator.js)\n\n## Other usage examples\n\n[Test.js](test.js) includes some usage examples\n\n# Full Docs\n\nYou can find the full docs on [the full documentation website](https://pubnub.github.io/open-chat-framework/docs/).\n\n# Table of Contents\n<!-- MarkdownTOC -->\n\n- Quick Setup\n    - Create Instance\n    - Connect to OCF Network\n- Using OCF\n    - Create a Chat\n    - Send a message to Chat\n    - Receive a message from Chat\n    - Create a bot that automatically replies to a message\n    - Subscribing to wildcard events\n- Classes\n    - Chats\n    - Users\n    - Me\n- Plugins\n    - Event Middleware Plugin\n    - Registering Plugin\n- Server Side Logic\n- Development\n    - Install Rltm\n    - Install dependencies\n    - Run Stephen Bot\n    - Load up example chat page\n- Develop / Build for Web\n\n<!-- /MarkdownTOC -->\n\n# Quick Setup\n\n## Create Instance\n\nThere are two require fields for initializing OCF.\n\n* ```rltm``` - OCF is based off PubNub [rltm.js](https://github.com/pubnub/rltm.js) which lets you switch between PubNub and Socket.io just by changing your configuration. Check out [the rltm.js docs](https://github.com/pubnub/rltm.js) for more information.\n* ```globalChannel``` - This is the global channel that all clients are connected to automatically. It's used for global announcements, global presence, etc.\n\n### Socket.io\n\n```js\nlet OCF = OpenChatFramework.create({\n    rltm: {\n        service: 'socketio', \n        config: {\n            endpoint: 'http://localhost:8000',\n        }\n    },\n    globalChannel: 'ocf-root-channel'\n});\n```\n\n### PubNub\n\n```js\nconst OCF = OpenChatFramework.create({\n    rltm: {\n        service: 'pubnub', \n        config: {\n            publishKey: 'YOUR_PUB_KEY',\n            subscribeKey: 'YOUR_SUB_KEY'\n        }\n    },\n    globalChannel: 'ocf-root-channel'\n});\n```\n\n## Connect to OCF Network\n\nNow we're going to connect to the network (defined in ```rltm``` config). In order to connect, we need to identify ourselves to the network.\n\n```\nme = OCF.connect(uuid, {username: username});\n```\n\nThe parameter ```uuid``` is a unique identifier for this client. It can be a user name, user id, email, etc.\n\nThe second parameter is a JSON object containing information about this client. This JSON object is sent to all other clients on the network, so no passwords!\n\nThis instance of OCF will make all further requests on behalf of the ```uuid``` you supplied. This is commonly called ```me```.\n\n# Using OCF\n\n## Create a Chat\n\nOnce OCF is set up, creating and connecting to a chatroom is as simple as:\n\n```js\nlet chat = new Chat('channel');\n```\n\nThis will automatically connect to the chat room.\n\n## Send a message to Chat\n\nYou can send a message to the chat by using the ```send()``` method to broadcast an event over the network.\n\n```js\nchat.send('message', 'my message');\n```\n\nThe first parameter is the event to send, and the second parameter is the message payload.\n\n## Receive a message from Chat\n\nYou can listen for messages from the chat by subscribing to the ```message``` event using the ```on()``` method. This works over the network, so it'll catch events sent from other clients. That's the whole point right ;)\n\n```js\nchat.on('message', (payload) => {\n    alert('message: ', payload.data.text);\n});\n```\n\nThe first parameter is the ```event``` you're listening for. Some event names are reserved (more on that later), but for the most part they can be anything.\n\nThe ```payload``` in the event callback is not the raw data you supplied while using ```send```. The payload is augmented with the ```Chat``` that the message was sent from, and the ```User``` that sent it (as defined in ```OCF.connect()```).\n\n```js\n{\n    chat: Chat,\n    data: {\n        text: 'my message'\n    },\n    sender: User\n}\n```\n\n## Create a bot that automatically replies to a message\n\nCreating a bot is super easy and we can do it using everything we learned previously.\n\nFirst, the bot will subscribe to the ```message``` network event. \n\nWhen a message comes it, it checks the payload to see if the message was sent by itself (to prevent infinite loops). \n\nIf it was not sent by itself, it sends a message back to the chatroom repeating the original message that was sent to it.\n\n```js\nchat.on('message', (payload) => {\n    \n    // make sure this is not a message this client sent myself\n    if(payload.user.data.uuid !== me.data.uuid) {\n\n        // send a message back to the chat that sent it\n        payload.chat.send('message', {\n            text: 'did you say \"' + payload.data.text + '\"?';\n        });\n\n    }\n\n});\n```\n\n## Subscribing to wildcard events\n\nYou can subscribe to all events a namespace emits by using the ```*``` operator.\n\n```js\nchat.on('$ocf.*', (event) => { \n});\n```\n\nYou can get any event a chat emits by using the ```onAny``` method.\n\n```js\nchat.onAny(() => {\n    \n});\n```\n\n# Classes\n\n## Chats\n\nChats are objects that emit events. You can subscribe to a chat event with ```chat.on('eventName', () => {})``` or fire a new event with ```chat.emit('eventName', {data})```.\n\nYou can get a list of users with ```chat.users```.\n\n## Users\n\nUsers represent connected clients. Every user has their own public chatroom called ```feed``` which only that user can publish to as well as a room called ```direct``` which only this user can subscribe to.\n\n## Me\n\nA subclass of ```User```. ```Me``` is returned when you run ```OCF.connect```. Me is the only user that allows the client to set it's own state with ```me.update()```.\n\n# Plugins\n\nPlugins can be registered to do cool things with OCF for free.\n\nAn plugin is a typical npm module. Here is an example of a plugin that sets a property on\n```Me``` called ```float``` which is equal to some random number.\n\n```js\nreturn {\n    namespace: '$yourPluginNamespace',\n    extends: {\n        Me: {\n            construct: function() {\n                // set the parent's username as random integer\n                this.parent.update({\n                    float: new Math.random()\n                });\n            },\n            getName: function() {\n                return this.parent.state().float;\n            }\n        }\n    }\n}\n```\n\nEvery plugin needs to be kept in some ```namespace``` for reasons that will make sense later :). \n\nThe property ```extends``` tells OCF what classes this plugin is going to extend. In this example the plugin is extending ```Me```, and you can see that because the key ```Me``` is supplied.\n\nThe object supplied as the value for the key ```Me``` configures new methods for the the ```Me``` object.\n\nThe method ```construct``` is a unique method that will be run whenever a new ```Me``` is created. The ```construct``` functions and all functions supplied in the plugin run in the context of the object in which they are extending. We can call ```this.parent``` to get access to the instance of ```Me```.\n\nIn the example above we use ```this.parent.update()``` to set a value of the user. This state is set\nacross the network and all other clients will get notified that this client has a new value.\n\nThe method ```getName()``` is a generic method that gets added to all instances of ```Me``` under the namespace ```$yourPluginNamespace```. From outside the plugin, you could call ```Me.$yourPluginNamespace.getName()``` to return the value.\n\n## Event Middleware Plugin \n\nIt's also possible to register middleware to run before events are sent or received.\n\nThe following example registers a function that runs before the event ```message``` is sent over the network.\n\n```js\n// middleware tells the framework to use these functions when \n// messages are sent\nreturn {\n    namespace: '$yourPluginNamespace',\n    middleware: {\n        send: {\n            message: function(payload, next) {\n\n                // append config.send to the text supplied in the event\n                payload.data.text += ' appended';\n\n                // continue along middleware\n                next(null, payload);\n\n            }\n        }\n    }\n}\n```\n\nThe property ```middleware``` tells OCF to run these functions during the event cycle.\n\nThe property ```send``` tells OCF to run this specific set of functions before the message\nis sent over the network.\n\nThe property ```message``` tells OCF to run this function only when the ```send``` event is emitted;\n\nTo fire this event, you would do:\n\n```js\nchat.send('message', {text: 'something'});\n```\n\nBefore the event is broadcast to the chat room, the text ```something``` would be run through\nthe ```message``` function which would turn it into ```something appended```.\n\nThe plugin must call the ```next()``` function with the complete payload when complete.\n\nIf there was an error, call ```next('there was an error');\n\n## Registering Plugin\n\nPlugins must be configured to work with OCF.\n\n```js\nOCF.loadPlugin(OpenChatFramework.plugin.typingIndicator({\n    timeout: 5000\n}));\n```\nThe config options supplied here are available as the first parameter in the plugin definition.\n\n# Server Side Logic\n\nIf you want to do something like fire a SMS on the server side, you can use PubNub blocks.\n\nYou can find an example block in [/examples/javascript/pubnub.block.js](/examples/javascript/pubnub.block.js) which sends an sms message using clicksend every time a message is sent to the [raw javascript chat example](/examples/javascript/chat.html).\n\n# Development\n\n## Install Rltm\n\nRltm must be installed in sibling directory.\n\n```sh\ncd ../\ngit clone https://github.com/pubnub/rltm\n```\n\n## Install dependencies\n\nInstall gulp and project dependencies.\n\n```sh\nnpm install\n```\n\n## Run Stephen Bot\n\n```sh\nnode examples/bot.js\n```\n\n## Load up example chat page\n\nYou can use file or localhost. Supply a username in the query string param to make it work properly.\n\nExample: \n\n```\n./open-chat-framework/examples/web.html?username=ian#\n```\n\n# Develop / Build for Web\n\nCompiled using browserify through gulp\n\n```sh\nnpm install only=dev\nnpm install gulp -g\n\nRun build task and watch for browser\n\n```sh\ngulp && gulp watch\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "882d55309a8ff2a3ad40eafc912493acf52ea930",
  "_id": "ocf@0.0.5",
  "_shasum": "691ac3c3a395f2bc124e2d1f1a62ad7f5e695707",
  "_from": "ocf@latest"
}
