(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function() {

    const package = require('../package.json');
    window.OpenChatFramework.plugin[package.name] = require('../src/plugin.js');

})();

},{"../package.json":2,"../src/plugin.js":3}],2:[function(require,module,exports){
module.exports={
  "name": "ocf-history",
  "version": "0.0.1",
  "main": "src/plugin.js",
  "dependencies": {
    "ocf": "^0.0.4"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^3.3.0"
  }
}

},{}],3:[function(require,module,exports){
// define our plugin values in root
const defaults = {timeout: 1000};

module.exports = (config) => {

    class extension {

        // construct is run automatically when plugin is added to Class
        construct(data) {

            // we can access the rltm room connection and call it's history method
            this.parent.room.history().then((response) => {

                response.reverse();

                // for every message we get back
                for(let i in response) {


                    if(response[i].data) {

                        // broadcast the same event with the same data
                        // but the event name is now history:name rather than just name
                        // to distinguish it from the original live events
                        this.parent.broadcast(
                            ['$history', response[i].data.message[0]].join('.'),
                            response[i].data.message[1]);

                    } else {

                        // something went wrong, person probably doesn't have history enabled
                        throw new Error(response[i]);

                    }

                }

            }, (error) => {
                throw new Error('There was a problem getting message history', error);
            });

        }
    };

    // attach methods to Chat
    return {
        namespace: 'history',
        extends: {
            Chat: extension,
            GlobalChat: extension
        }
    }

}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy5udm0vdmVyc2lvbnMvbm9kZS92Ni43LjAvbGliL25vZGVfbW9kdWxlcy9vY2YtcGx1Z2luL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIudG1wL3dyYXAuanMiLCJwYWNrYWdlLmpzb24iLCJzcmMvcGx1Z2luLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiKGZ1bmN0aW9uKCkge1xuXG4gICAgY29uc3QgcGFja2FnZSA9IHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpO1xuICAgIHdpbmRvdy5PcGVuQ2hhdEZyYW1ld29yay5wbHVnaW5bcGFja2FnZS5uYW1lXSA9IHJlcXVpcmUoJy4uL3NyYy9wbHVnaW4uanMnKTtcblxufSkoKTtcbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJuYW1lXCI6IFwib2NmLWhpc3RvcnlcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4wLjFcIixcbiAgXCJtYWluXCI6IFwic3JjL3BsdWdpbi5qc1wiLFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJvY2ZcIjogXCJeMC4wLjRcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJjaGFpXCI6IFwiXjMuNS4wXCIsXG4gICAgXCJtb2NoYVwiOiBcIl4zLjMuMFwiXG4gIH1cbn1cbiIsIi8vIGRlZmluZSBvdXIgcGx1Z2luIHZhbHVlcyBpbiByb290XG5jb25zdCBkZWZhdWx0cyA9IHt0aW1lb3V0OiAxMDAwfTtcblxubW9kdWxlLmV4cG9ydHMgPSAoY29uZmlnKSA9PiB7XG5cbiAgICBjbGFzcyBleHRlbnNpb24ge1xuXG4gICAgICAgIC8vIGNvbnN0cnVjdCBpcyBydW4gYXV0b21hdGljYWxseSB3aGVuIHBsdWdpbiBpcyBhZGRlZCB0byBDbGFzc1xuICAgICAgICBjb25zdHJ1Y3QoZGF0YSkge1xuXG4gICAgICAgICAgICAvLyB3ZSBjYW4gYWNjZXNzIHRoZSBybHRtIHJvb20gY29ubmVjdGlvbiBhbmQgY2FsbCBpdCdzIGhpc3RvcnkgbWV0aG9kXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yb29tLmhpc3RvcnkoKS50aGVuKChyZXNwb25zZSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgcmVzcG9uc2UucmV2ZXJzZSgpO1xuXG4gICAgICAgICAgICAgICAgLy8gZm9yIGV2ZXJ5IG1lc3NhZ2Ugd2UgZ2V0IGJhY2tcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgaW4gcmVzcG9uc2UpIHtcblxuXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlc3BvbnNlW2ldLmRhdGEpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnJvYWRjYXN0IHRoZSBzYW1lIGV2ZW50IHdpdGggdGhlIHNhbWUgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IHRoZSBldmVudCBuYW1lIGlzIG5vdyBoaXN0b3J5Om5hbWUgcmF0aGVyIHRoYW4ganVzdCBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBkaXN0aW5ndWlzaCBpdCBmcm9tIHRoZSBvcmlnaW5hbCBsaXZlIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQuYnJvYWRjYXN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsnJGhpc3RvcnknLCByZXNwb25zZVtpXS5kYXRhLm1lc3NhZ2VbMF1dLmpvaW4oJy4nKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVtpXS5kYXRhLm1lc3NhZ2VbMV0pO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvbWV0aGluZyB3ZW50IHdyb25nLCBwZXJzb24gcHJvYmFibHkgZG9lc24ndCBoYXZlIGhpc3RvcnkgZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlW2ldKTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlcmUgd2FzIGEgcHJvYmxlbSBnZXR0aW5nIG1lc3NhZ2UgaGlzdG9yeScsIGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gYXR0YWNoIG1ldGhvZHMgdG8gQ2hhdFxuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWVzcGFjZTogJ2hpc3RvcnknLFxuICAgICAgICBleHRlbmRzOiB7XG4gICAgICAgICAgICBDaGF0OiBleHRlbnNpb24sXG4gICAgICAgICAgICBHbG9iYWxDaGF0OiBleHRlbnNpb25cbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19
